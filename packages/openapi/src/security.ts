import type { Uri } from '@talesoft/schema'

export type ApiKeyLocation = 'query' | 'header' | 'cookie'

export interface SecuritySchemeBase {
  /**
   * A short description for security scheme. CommonMark syntax MAY be used for rich text representation.
   */
  description?: string
}

export interface ApiKeySecurityScheme extends SecuritySchemeBase {
  type: 'apiKey'
  /**
   * The name of the header, query or cookie parameter to be used.
   */
  name: string
  /**
   * The location of the API key. Valid values are "query", "header" or "cookie".
   */
  in: ApiKeyLocation
}

export interface HttpSecurityScheme extends SecuritySchemeBase {
  type: 'http'
  /**
   * The name of the HTTP Authorization scheme to be used in the Authorization header as defined in RFC7235. The values used SHOULD be registered in the IANA Authentication Scheme registry.
   */
  scheme: string

  /**
   * A hint to the client to identify how the bearer token is formatted. Bearer tokens are usually generated by an authorization server, so this information is primarily for documentation purposes.
   *
   * Default: bearer
   */
  bearerFormat?: string
}

export interface OAuth2Flow {
  /**
   * The authorization URL to be used for this flow. This MUST be in the form of a URL.
   */
  authorizationUrl: Uri
  /**
   * The token URL to be used for this flow. This MUST be in the form of a URL.
   */
  tokenUrl: Uri
  /**
   * The available scopes for the OAuth2 security scheme. A map between the scope name and a short description for it. The map MAY be empty.
   */
  scopes: Record<string, string>
  /**
   * The URL to be used for obtaining refresh tokens. This MUST be in the form of a URL.
   */
  refreshUrl?: Uri
}

export interface Oauth2Flows {
  /**
   * Configuration for the OAuth Implicit flow
   */
  implicit?: OAuth2Flow
  /**
   * Configuration for the OAuth Resource Owner Password flow
   */
  password?: OAuth2Flow
  /**
   * Configuration for the OAuth Client Credentials flow. Previously called application in OpenAPI 2.0.
   */
  clientCredentials?: OAuth2Flow
  /**
   * Configuration for the OAuth Authorization Code flow. Previously called accessCode in OpenAPI 2.0.
   */
  authorizationCode?: OAuth2Flow
}

export interface Oauth2SecurityScheme extends SecuritySchemeBase {
  type: 'oauth2'
  /**
   * An object containing configuration information for the flow types supported.
   */
  flows: Oauth2Flows
}

export interface OpenIdConnectSecurityScheme extends SecuritySchemeBase {
  type: 'openIdConnect'
  /**
   * OpenId Connect URL to discover OAuth2 configuration values. This MUST be in the form of a URL.
   */
  openIdConnectUrl: Uri
}

export type SecurityScheme =
  | ApiKeySecurityScheme
  | HttpSecurityScheme
  | Oauth2SecurityScheme
  | OpenIdConnectSecurityScheme

export type SecurityRequirement = Record<string, string[]>
